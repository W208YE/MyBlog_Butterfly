<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Promise.md</title>
      <link href="/2022/06/12/Promise-md/"/>
      <url>/2022/06/12/Promise-md/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="1-实例对象与函数对象"><a href="#1-实例对象与函数对象" class="headerlink" title="1. 实例对象与函数对象"></a>1. 实例对象与函数对象</h3><ul><li>实例对象:  new函数产生的对象, 称为实例对象, 简称为对象</li><li>函数对象:  <strong>将函数作为对象使用</strong>时, 称为函数对象</li></ul><blockquote><p>( ) 左边是函数, 点左边是对象(函数对象、实例对象)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123; <span class="comment">// Fn只能称为函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fn称为实例对象</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">new</span> <span class="title class_">Fn</span>(); <span class="comment">// Fn只有new过的才可以称为构造函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// Fn作为对象使用时, 才可以称为函数对象</span></span><br><span class="line"><span class="title class_">Fn</span>.<span class="title function_">bind</span>(&#123;&#125;); <span class="comment">// Fn作为函数对象使用</span></span><br><span class="line">$(<span class="string">&#x27;#test&#x27;</span>); <span class="comment">// $作为函数使用</span></span><br><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;/test&#x27;</span>); <span class="comment">// $作为函数对象使用</span></span><br></pre></td></tr></table></figure><h3 id="2-两种类型的回调函数"><a href="#2-两种类型的回调函数" class="headerlink" title="2. 两种类型的回调函数"></a>2. 两种类型的回调函数</h3><p><strong>1. 同步回调</strong></p><blockquote><p>立即执行, 完全执行完了才结束, 不会放入回调队列中</p></blockquote><p>数组遍历相关的回调 &#x2F; promise 的executor函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="comment">// 遍历回调, 同步回调, 不会放入队列, 一上来就要执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;forEach()之后&#x27;</span>);</span><br><span class="line"><span class="comment">// 1 3 5</span></span><br><span class="line"><span class="comment">// forEach()之后</span></span><br></pre></td></tr></table></figure><p><strong>2. 异步回调</strong></p><blockquote><p>不会立即执行, 会放入回调队列中, 将来执行</p></blockquote><p>定时器回调 &#x2F; ajax回调 &#x2F; Promise成功或失败的回调</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时器回调</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 异步回调, 会放入队列中将来执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timeout callback()&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout()之后&#x27;</span>);</span><br><span class="line"><span class="comment">// setTimeout()之后</span></span><br><span class="line"><span class="comment">// timeout callback()</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise 成功或失败的回调</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;value&#x27;</span>, value);</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reason&#x27;</span>, reason);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise后&#x27;</span>);</span><br><span class="line"><span class="comment">// promise后</span></span><br><span class="line"><span class="comment">// value 1</span></span><br></pre></td></tr></table></figure><blockquote><p>js引擎先把初始化的同步代码都执行完之后, 才执行回调队列中的代码</p></blockquote><h3 id="3-JS中的异常error处理"><a href="#3-JS中的异常error处理" class="headerlink" title="3. JS中的异常error处理"></a><strong>3. JS中的异常error处理</strong></h3><p><strong>1. 错误类型</strong></p><p><code>Error</code>:  所有错误的父类型</p><p><code>ReferenceError</code>:  引用的变量不存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// ReferenceError:a is not defined</span></span><br></pre></td></tr></table></figure><p><code>TypeError</code>:  数据类型不正确</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">xxx</span>)</span><br><span class="line"><span class="comment">// TypeError:Cannot read property &#x27;xxx&#x27; of undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = &#123;&#125;</span><br><span class="line">c.<span class="title function_">xxx</span>()</span><br><span class="line"><span class="comment">// TypeError:c.xxx is not a function</span></span><br></pre></td></tr></table></figure><p><code>RangeError</code>:  数据值不在其所允许的范围内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">// RangeError:Maximum call stack size exceeded</span></span><br></pre></td></tr></table></figure><p><code>SyntaxError</code>:  语法错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">// SyntaxError:Unexpected string</span></span><br></pre></td></tr></table></figure><p><strong>2. 错误处理(捕获与抛出)</strong></p><p>抛出错误:  <code>throw error</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">something</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Date</span>.<span class="title function_">now</span>() % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前时间为奇数, 可以运行&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果时间为偶数抛出异常, 由调用来处理</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;当前时间为偶数, 无法执行任务&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>捕获错误: <code>try ... catch</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 捕获处理异常</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="title function_">something</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(error.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 错误对象</strong></p><ul><li><code>massage属性</code>: 错误相关信息</li><li><code>stack属性</code>: 函数调用栈记录信息</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> d</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">xxx</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">stack</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错之后&#x27;</span>)</span><br><span class="line"><span class="comment">// Cannot read property &#x27;xxx&#x27; of undefined</span></span><br><span class="line"><span class="comment">// TypeError:Cannot read property &#x27;xxx&#x27; of undefined</span></span><br><span class="line"><span class="comment">// 出错之后</span></span><br></pre></td></tr></table></figure><h2 id="一、Promise是什么"><a href="#一、Promise是什么" class="headerlink" title="一、Promise是什么"></a>一、Promise是什么</h2><h3 id="1-理解Promise"><a href="#1-理解Promise" class="headerlink" title="1. 理解Promise"></a>1. 理解Promise</h3><ul><li><p>Promise 是异步编程的一种解决方案，<code>主要用来解决回调地狱的问题，可以有效的减少回调嵌套</code>。真正解决需要&#96;配合async&#x2F;await。</p></li><li><p>具体表达：</p><ol><li>从语法上看：<code>Promise</code>是一个构造函数 (自己身上有<code>all, reject, resolve</code>这几个方法, 原型上有<code>then, catch</code>等方法)</li><li>从功能上看:  <code>Promise</code>对象用来封装一个异步操作并可以获取其成功&#x2F;失败的结果值</li></ol></li><li><p>阮一峰的解释:</p><p>所谓<code>promise</code>, 简单说就是一个容器, 里面保存着某个未来才会结束的事件(通常是一个异步操作)的结果</p><p>从语法上说, <code>promise</code>是一个对象, 从它可以获取异步信息的消息</p><p><code>promise</code>提供统一的API, 各种异步操作都可以用同样的方法进行处理</p></li></ul><h3 id="2-Promise的状态"><a href="#2-Promise的状态" class="headerlink" title="2. Promise的状态"></a>2. Promise的状态</h3><ol><li>对象的状态不受外界影响。</li><li>Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称Fulfilled）和Rejected（已失败）。</li><li>只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</li><li><strong>一旦状态改变，就不会再变</strong>，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。如果改变已经发生了，再对Promise对象添加回调函数，也会立即得到原来的结果。</li></ol><p><strong>缺点:</strong></p><ol><li>无法取消Promise，一旦新建它就会立即执行，无法中途取消。和一般的对象不一样，无需调用。</li><li>如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。</li><li>当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）</li></ol><h3 id="3-Promise对象的值"><a href="#3-Promise对象的值" class="headerlink" title="3. Promise对象的值"></a>3. Promise对象的值</h3><p>实例对象promise的另一个值<code>PromiseResult</code></p><p>保存着对象成功&#x2F;失败的值(<code>value/reason</code>)</p><p><code>resolve/reject</code>可以修改值</p><h3 id="4-Promise的基本流程"><a href="#4-Promise的基本流程" class="headerlink" title="4. Promise的基本流程"></a>4. Promise的基本流程</h3><p>![image-20220524085104055](C:\Users\W-208 枼\AppData\Roaming\Typora\typora-user-images\image-20220524085104055.png)</p><h3 id="5-Promise的基本使用"><a href="#5-Promise的基本使用" class="headerlink" title="5. Promise的基本使用"></a>5. Promise的基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// ... some code</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Promise</code>构造函数接收一个 <strong>函数</strong> (执行器函数)作为参数, 该函数的 <strong>两个参数</strong> 分别是<code>resolve</code>和<code>reject</code>. 它们是 <strong>两个函数</strong>, 有JavaScript引擎提供, 不用自己部署</p><p><code>resolve</code>函数的作用是, 将<code>promise</code>对象的状态从”未完成”变为”成功”(即从<code>pending</code>变为<code>resolved</code>), 在 <strong>异步操作成功</strong> 时调用, 并将异步操作的结果, 作为参数<code>value</code>传递出去; </p><p><code>reject</code>函数的作用是, 将<code>promise</code>对象的状态从”未完成”变为”失败”(即从<code>pending</code>变为<code>rejected</code>), 在 <strong>异步操作成功</strong> 时调用, 并将异步操作的结果, 作为参数<code>error/reason</code>传递出去; </p><p><code>Promise</code>实例生成以后,  可以用<code>then</code>方法分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line"><span class="comment">// success </span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">reason</span>) &#123;</span><br><span class="line"><span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>then</code>方法可以接受 <strong>两个回调函数</strong> 作为参数</p><p>第一个回调函数<code>onResolved()</code>是<code>Promise</code>对象的状态变为<code>resolved</code>时调用</p><p>第二个回调函数<code>onRejected()</code>是<code>Promise</code>对象的状态变为<code>rejected</code>时调用</p><p>这两个函数都是可选的, 不一定要提供.  它们都接受<code>Promise</code>对象传出的值作为参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的p对象promise</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; <span class="comment">// 执行器函数</span></span><br><span class="line">    <span class="comment">// 执行异步操作任务</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="comment">// 如果当时间是偶数代表成功, 否则失败</span></span><br><span class="line">        <span class="keyword">if</span> (time % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果成功, 调用resolve(value)</span></span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;成功的数据, time=&#x27;</span> + time);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果失败, 调用reject(reason)</span></span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;失败的数据, time=&#x27;</span> + time);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123; <span class="comment">// 接收到成功的value数据 onResolved</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功的回调&#x27;</span>, value); <span class="comment">// 成功的回调 成功的数据</span></span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="comment">// 接收到失败的reason数据 onRejected</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败的回调&#x27;</span>, reason); <span class="comment">// 失败的回调 失败的数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>then()和执行器executor同步执行, then()中的回调函数异步执行</p></blockquote><h2 id="二、为什么用Promise"><a href="#二、为什么用Promise" class="headerlink" title="二、为什么用Promise"></a>二、为什么用Promise</h2><h3 id="1-指定回调函数的方式更加灵活"><a href="#1-指定回调函数的方式更加灵活" class="headerlink" title="1. 指定回调函数的方式更加灵活"></a>1. 指定回调函数的方式更加灵活</h3><p>旧的: 必须在启动异步任务前指定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 纯回调的形式</span></span><br><span class="line"><span class="comment">// 成功的回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">successCallback</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;声音文件创建成功: &#x27;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 失败的回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">failureCallback</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;声音文件创建失败: &#x27;</span> + error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 必须先指定回调函数, 再执行异步任务</span></span><br><span class="line"><span class="comment">// 回调函数在执行异步任务(函数)前就要指定</span></span><br><span class="line"><span class="title function_">createAudioFileAsync</span>(audioSettings, successCallback, failureCallback); </span><br></pre></td></tr></table></figure><p>promise: 启动异步任务 &#x3D;&gt; 返回promise对象 &#x3D;&gt; 给promise对象绑定回调函数(甚至可以在异步任务结束后指定)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 使用Promise</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="title function_">createAudioFileAsync</span>(audioSettings); <span class="comment">// 执行2s</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    promise.<span class="title function_">then</span>(successCallback, failureCallback); <span class="comment">// 也可以获取</span></span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="2-支持链式调用-解决回调地狱问题"><a href="#2-支持链式调用-解决回调地狱问题" class="headerlink" title="2. 支持链式调用, 解决回调地狱问题"></a>2. 支持链式调用, 解决回调地狱问题</h3><p><strong>回调地狱</strong>: 回调函数嵌套调用, 外部回调函数异步指定的结果是其内部嵌套的回调函数执行的条件</p><p><strong>缺点</strong>: 不便于阅读; 不便于异常处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">doSomething</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="title function_">doSomethingElse</span>(result, <span class="keyword">function</span>(<span class="params">newResult</span>) &#123;</span><br><span class="line">    <span class="title function_">doThirdThing</span>(newResult, <span class="keyword">function</span>(<span class="params">finalResult</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Got the final result:&#x27;</span> + finalResult)</span><br><span class="line">    &#125;, failureCallback)</span><br><span class="line">  &#125;, failureCallback)</span><br><span class="line">&#125;, failureCallback)</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong>: <code>promise</code>链式调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">doSomething</span>()</span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> <span class="title function_">doSomethingElse</span>(result)</span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">newResult</span> =&gt;</span> <span class="title function_">doThirdThing</span>(newResult)</span><br><span class="line">).<span class="title function_">then</span>(<span class="function"><span class="params">finalResult</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Got the final result:&#x27;</span> + finalResult);  </span><br><span class="line">&#125;).<span class="title function_">catch</span>(failureCallback)</span><br></pre></td></tr></table></figure><p>**终极解决方案: **<code>async/await</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">doSomething</span>();</span><br><span class="line">        <span class="keyword">const</span> newResult = <span class="keyword">await</span> <span class="title function_">doSomeElse</span>(result);</span><br><span class="line">        <span class="keyword">const</span> finalResult = <span class="keyword">await</span> <span class="title function_">doThirdThing</span>(newResult);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">        <span class="title function_">failureCallback</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-如何使用Promise"><a href="#3-如何使用Promise" class="headerlink" title="3. 如何使用Promise"></a>3. 如何使用Promise</h3><h4 id="3-1-Promise构造函数-Promise-executor"><a href="#3-1-Promise构造函数-Promise-executor" class="headerlink" title="3.1 Promise构造函数: Promise(executor){}"></a>3.1 Promise构造函数: <code>Promise(executor)&#123;&#125;</code></h4><ul><li><code>executor</code>函数:  同步执行<code>(resolve, reject) =&gt; &#123;&#125;</code></li><li><code>resolve</code>函数:  内部定义成功时调用的函数<code>resolve(value)</code></li><li><code>reject</code>函数:  内部定义失败时调用的函数<code>reject(reason)</code></li></ul><p>说明: <code>executor</code>是执行器, 会在<code>Promise</code>内部立即同步回调, 异步操作<code>resolve/reject</code>就在<code>executor</code>中执行</p><h4 id="3-2-Promise-prototype-then方法-p-then-onResolved-onRejected"><a href="#3-2-Promise-prototype-then方法-p-then-onResolved-onRejected" class="headerlink" title="3.2 Promise.prototype.then方法: p.then(onResolved, onRejected)"></a>3.2 Promise.prototype.then方法: <code>p.then(onResolved, onRejected)</code></h4><p>指定两个回调(成功+失败)</p><ul><li><p><code>onResolved</code>函数: 成功的回调函数<code>(value) =&gt; &#123;&#125;</code></p></li><li><p><code>onRejected</code>函数: 失败的回调函数<code>(reason) =&gt; &#123;&#125;</code></p></li></ul><p>说明: 指定用于得到成功<code>value</code>的成功回调和用于得到失败<code>reason</code>的失败回调, 返回一个新的<code>promise</code>对象</p><h4 id="3-3-Promise-prototype-catch方法-p-catch-onRejected"><a href="#3-3-Promise-prototype-catch方法-p-catch-onRejected" class="headerlink" title="3.3 Promise.prototype.catch方法: p.catch(onRejected)"></a>3.3 Promise.prototype.catch方法: <code>p.catch(onRejected)</code></h4><p>指定失败的回调</p><p><code>onRejected</code>函数:  失败的回调函数<code>(reason) =&gt; &#123;&#125;</code></p><p>说明: <code>then()</code>的语法糖, 相当于<code>then(undefined, onRejected)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; <span class="comment">// executor</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (...) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;成功的数据&#x27;</span>); <span class="comment">// resolve()函数</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;失败的数据&#x27;</span>); <span class="comment">// reject()函数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123; <span class="comment">// onResolved()函数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 成功的数据</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reason); <span class="comment">// 失败的数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-4-Promise-resolve方法-Promise-resolve-value"><a href="#3-4-Promise-resolve方法-Promise-resolve-value" class="headerlink" title="3.4 Promise.resolve方法: Promise.resolve(value)"></a>3.4 Promise.resolve方法: <code>Promise.resolve(value)</code></h4><p><code>value</code>: 将被<code>Promise</code>对象解析的参数, 也可以是一个成功或失败的<code>Promise</code>对象</p><p>返回值: 返回一个带着给定值解析过的<code>Promise</code>对象, 如果参数本身就是一个<code>Promise</code>对象, 则直接返回这个<code>Promise</code>对象</p><ol><li>如果传入的参数为非<code>Promise</code>类型的对象, 则返回的结果为成功的<code>promise</code>对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">5312</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1); <span class="comment">// Promise &#123;&lt;fulfilled&gt;: 5312&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>如果传入的参数为<code>Promise</code>对象, 则参数的结果决定了<code>resolve</code>的结果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// resolve(&#x27;OK&#x27;); // 成功的Promise</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2);</span><br><span class="line">p2.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-5-Promise-reject方法-Promise-resolve-reason"><a href="#3-5-Promise-reject方法-Promise-resolve-reason" class="headerlink" title="3.5 Promise.reject方法: Promise.resolve(reason)"></a>3.5 Promise.reject方法: <code>Promise.resolve(reason)</code></h4><p>返回一个失败的<code>promise</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">521</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;iloveyou&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p3);</span><br></pre></td></tr></table></figure><blockquote><p><code>Promise.resolve()/Promise.reject()</code>方法就是一个语法糖, 用来快速得到Promise对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 产生一个成功值为1的promise对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">3</span>);</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(value)&#125;); <span class="comment">// 1</span></span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(value)&#125;); <span class="comment">// 2</span></span><br><span class="line">p3.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(reason)&#125;); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="3-6-Promise-all方法-Promise-all-iterable"><a href="#3-6-Promise-all方法-Promise-all-iterable" class="headerlink" title="3.6 Promise.all方法: Promise.all(iterable)"></a>3.6 Promise.all方法: <code>Promise.all(iterable)</code></h4><p><code>iterable</code>: 包含n个<code>promise</code>的可迭代对象, 如<code>Array</code>或<code>String</code></p><p>说明: 返回一个新的<code>promise</code>, 只有所有的<code>promise</code>都成功才成功, 只要有一个失败了就直接失败</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Oh Yeah&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>![image-20220524101928945](C:\Users\W-208 枼\AppData\Roaming\Typora\typora-user-images\image-20220524101928945.png)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Oh Yeah&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>![image-20220524102024392](C:\Users\W-208 枼\AppData\Roaming\Typora\typora-user-images\image-20220524102024392.png)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pAll = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span><br><span class="line"><span class="keyword">const</span> pAll2 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2]);</span><br><span class="line"><span class="comment">// 因为其中p3为失败， 所以pAll失败</span></span><br><span class="line">pAll.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;all onResolved()&#x27;</span>, value);</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;all onRejected()&#x27;</span>, reason);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// all onRejected() 3</span></span><br><span class="line">pAll2.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;all onResolved()&#x27;</span>, value);</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;all onRejected()&#x27;</span>, reason);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// all onResolved() [1, 2]</span></span><br></pre></td></tr></table></figure><h4 id="3-7-Promise-race方法-Promise-race-iterable"><a href="#3-7-Promise-race方法-Promise-race-iterable" class="headerlink" title="3.7 Promise.race方法: Promise.race(iterable)"></a>3.7 Promise.race方法: <code>Promise.race(iterable)</code></h4><p><code>iterable</code>: 包含n个<code>promise</code>的可迭代对象, 如<code>Array</code>或<code>String</code></p><p>说明: 返回一个新的<code>promise</code>, 第一个完成的<code>promise</code>的结果状态就是最终的结果状态</p><p><strong>谁先完成就先输出谁(不管是成功还是失败)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 谁先完成就输出谁(不管是成功还是失败)</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pRace = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]);</span><br><span class="line">pRace.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;race onResolved()&#x27;</span>, value);</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;race onRejected()&#x27;</span>, reason);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// race onResolved() 2</span></span><br></pre></td></tr></table></figure><p>![image-20220524103845185](C:\Users\W-208 枼\AppData\Roaming\Typora\typora-user-images\image-20220524103845185.png)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Oh Yeah&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>![image-20220524103832375](C:\Users\W-208 枼\AppData\Roaming\Typora\typora-user-images\image-20220524103832375.png)</p><h2 id="三、Promise的几个关键问题"><a href="#三、Promise的几个关键问题" class="headerlink" title="三、Promise的几个关键问题"></a>三、Promise的几个关键问题</h2><h3 id="1-如何改变promise的状态"><a href="#1-如何改变promise的状态" class="headerlink" title="1. 如何改变promise的状态"></a>1. 如何改变promise的状态</h3><ol><li><code>resolve(value)</code>: 如果当前是<code>pending</code>就会变为<code>resolved</code></li><li><code>reject(reason)</code>: 如果当前是<code>pending</code>就会变为<code>rejected</code></li><li>抛出异常: 如果当前是<code>pending</code>就会变为<code>rejected</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// promise变为resolved成功状态</span></span><br><span class="line">  <span class="comment">// resolve(1);</span></span><br><span class="line">  <span class="comment">// promise变为rejected失败状态</span></span><br><span class="line">  <span class="comment">// reject(2); </span></span><br><span class="line">  <span class="comment">// 抛出异常, promise变为rejected失败状态, reason为抛出的error</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;出错了&#x27;</span>); </span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reason&#x27;</span>, reason);&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// reason Error: 出错了</span></span><br></pre></td></tr></table></figure><h3 id="2-一个promise指定多个成功-x2F-失败回调函数-都会调用吗"><a href="#2-一个promise指定多个成功-x2F-失败回调函数-都会调用吗" class="headerlink" title="2. 一个promise指定多个成功&#x2F;失败回调函数, 都会调用吗"></a>2. 一个promise指定多个成功&#x2F;失败回调函数, 都会调用吗</h3><p>当<code>promise</code>变为对应状态时都会调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(1);</span></span><br><span class="line">  <span class="title function_">reject</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reason&#x27;</span>, reason);&#125;</span><br><span class="line">)</span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reason2&#x27;</span>, reson);&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// reason 2</span></span><br><span class="line"><span class="comment">// reason2 2</span></span><br></pre></td></tr></table></figure><h3 id="3-改变promise状态和指定回调函数谁先谁后"><a href="#3-改变promise状态和指定回调函数谁先谁后" class="headerlink" title="3. 改变promise状态和指定回调函数谁先谁后"></a>3. 改变promise状态和指定回调函数谁先谁后</h3><blockquote><p>都有可能, 常规是先指定回调再改变状态, 但也可以先改状态再指定回调</p></blockquote><ul><li>如何先改变状态再指定回调?<ol><li>在执行器中直接调用<code>resolve()/reject()</code></li><li>若改变状态和指定回调都是异步任务（如都在定时器setTimeout中），则延迟更长时才调用<code>then()</code></li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">  <span class="comment">// &#125;, 1000); // 有异步就先指定回调，否则先改变状态</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p); <span class="comment">// Promise &#123;&lt;fulfilled&gt;: &#x27;OK&#x27;&#125;</span></span><br><span class="line">&#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// console.log(p); // Promise &#123;&lt;pending&gt;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>什么时候才能得到数据？<ol><li>如果先指定的回调，当状态发生改变时，回调函数就会调用得到数据</li><li>如果先改变状态，那当指定回调时，回调函数就会调用得到数据</li></ol></li></ul><p>此时，先指定回调函数，保存当前指定的回调函数；后改变状态（同时指定数据），然后异步执行之前保存的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">1</span>); <span class="comment">// 改变状态</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>( <span class="comment">// 指定回调函数(先指定)</span></span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这种写法，先改变的状态（同时指定数据），后指定回调函数（不需要再保存），直接异步指定回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">1</span>); <span class="comment">// 改变状态</span></span><br><span class="line">&#125;).<span class="title function_">then</span>( <span class="comment">// 指定回调函数</span></span><br><span class="line"><span class="function"><span class="params">value</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">    <span class="function"><span class="params">reason</span> =&gt;</span> &#123;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="4-promise-then-返回的新promise的结果状态由什么决定？"><a href="#4-promise-then-返回的新promise的结果状态由什么决定？" class="headerlink" title="4. promise.then()返回的新promise的结果状态由什么决定？"></a>4. promise.then()返回的新promise的结果状态由什么决定？</h3><p><strong>简单表达</strong>:  由<code>then()</code>指定的回调函数执行的结果决定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行then方法</span></span><br><span class="line"><span class="keyword">let</span> result = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>![image-20220524145424000](C:\Users\W-208 枼\AppData\Roaming\Typora\typora-user-images\image-20220524145424000.png)</p><p><strong>详细表达</strong>:</p><ol><li>如果抛出异常, 新<code>promise</code>变为<code>rejected</code>, <code>reason</code>为抛出的异常</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行then方法</span></span><br><span class="line"><span class="keyword">let</span> result = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1.抛出错误</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;出问题了&#x27;</span>;</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>![image-20220524145518201](C:\Users\W-208 枼\AppData\Roaming\Typora\typora-user-images\image-20220524145518201.png)</p><ol start="2"><li>如果返回的是非<code>promise</code>的任意值,  新<code>promise</code>变为<code>resolved</code>, <code>value</code>为返回的值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行 then 方法</span></span><br><span class="line"><span class="keyword">let</span> result = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 2.返回结果是非 promise 类型的对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">521</span>;</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>![image-20220524145251006](C:\Users\W-208 枼\AppData\Roaming\Typora\typora-user-images\image-20220524145251006.png)</p><ol start="3"><li>如果返回的是另一个新<code>promise</code>, 此<code>promise</code>的结果就会成为新<code>promise</code>的结果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行then方法</span></span><br><span class="line"><span class="keyword">let</span> result = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 3.返回结果是 promise 对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve(&#x27;success&#x27;);</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>![image-20220524145630836](C:\Users\W-208 枼\AppData\Roaming\Typora\typora-user-images\image-20220524145630836.png)</p><p><strong>案例一</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved1()&#x27;</span>, value);</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onRejected1()&#x27;</span>, reason);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved2()&#x27;</span>, value);</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onRejected2()&#x27;</span>, reason);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// onResolved1() 1</span></span><br><span class="line"><span class="comment">// onResolved2() undefined</span></span><br></pre></td></tr></table></figure><p>![image-20220524145925132](C:\Users\W-208 枼\AppData\Roaming\Typora\typora-user-images\image-20220524145925132.png)</p><p><strong>案例二</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved1()&#x27;</span>, value);</span><br><span class="line">    <span class="comment">// return 2;                   // onResolved2() 2</span></span><br><span class="line">    <span class="comment">// return Promise.resolve(3);  // onResolved2() 3</span></span><br><span class="line">    <span class="comment">// return Promise.reject(4);   // onRejected2() 4</span></span><br><span class="line">    <span class="comment">// throw 5;                    // onRejected2() 5</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onRejected1()&#x27;</span>, reason);</span><br><span class="line">  &#125;</span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved2()&#x27;</span>, value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onRejected2()&#x27;</span>, reason);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// onResolved1() 1</span></span><br><span class="line"><span class="comment">// onResolved2() undefined</span></span><br><span class="line"><span class="comment">// 对应输出如上所示</span></span><br></pre></td></tr></table></figure><h3 id="5-Promise如何串联多个操作任务"><a href="#5-Promise如何串联多个操作任务" class="headerlink" title="5. Promise如何串联多个操作任务"></a>5. Promise如何串联多个操作任务</h3><ol><li><code>promise</code> 的 <code>then()</code>返回一个新的<code>promise</code>, 可以并成<code>then()</code>的链式调用</li><li>通过<code>then()</code>的链式调用串联多个同步&#x2F;异步任务</li></ol><p><strong>案例一</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// success</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// undefined</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>案例二</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行任务1(异步)&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;任务1的结果&#x27;</span>, value);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行任务2(同步)&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">// 同步任务直接return返回结果</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;任务2的结果&#x27;</span>, value);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; <span class="comment">// 异步任务需要包裹在Promise对象中</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行任务3(异步)&#x27;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;任务3的结果&#x27;</span>, value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>![image-20220524165043730](C:\Users\W-208 枼\AppData\Roaming\Typora\typora-user-images\image-20220524165043730.png)</p><h3 id="6-Promise异常穿透"><a href="#6-Promise异常穿透" class="headerlink" title="6. Promise异常穿透"></a>6. Promise异常穿透</h3><p>当使用<code>promise</code>的<code>then</code>链式调用时, 可以在最后指定失败的回调, 前面任何操作出了异常, 都会传到最后失败的回调中处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(1);</span></span><br><span class="line">  <span class="title function_">reject</span>(<span class="number">2</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved1()&#x27;</span>, value);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved2()&#x27;</span>, value);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved3()&#x27;</span>, value);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onRejected1()&#x27;</span>, reason);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// onRejected1() 2</span></span><br></pre></td></tr></table></figure><p>相比于上面写法, 多写了很多<code>reason =&gt; &#123;throw reason&#125;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">//resolve(1)</span></span><br><span class="line">   <span class="title function_">reject</span>(<span class="number">1</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved1()&#x27;</span>, value)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125; <span class="comment">// 抛出失败的结果reason</span></span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved2()&#x27;</span>, value)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125; <span class="comment">// 抛出失败的结果reason</span></span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved3()&#x27;</span>, value)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125; <span class="comment">// 抛出失败的结果reason</span></span><br><span class="line">).<span class="title function_">catch</span>(</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onRejected1()&#x27;</span>, reason)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// onRejected1() 1</span></span><br><span class="line"><span class="comment">// then中的reason并不执行</span></span><br><span class="line"><span class="comment">// 将reason =&gt; &#123;throw reason&#125; 替换为 reason =&gt; Promise.reject(reason)也是一样的</span></span><br></pre></td></tr></table></figure><p>所以失败的结果是一层一层处理下来的, 最后传递到<code>catch</code>中</p><h3 id="7-中断promise链"><a href="#7-中断promise链" class="headerlink" title="7. 中断promise链"></a>7. 中断promise链</h3><p><strong>问题</strong>: 当使用<code>promise</code>的<code>then</code>链式调用时, 在中间中断, 不再调用后面的回调函数</p><p><strong>解决</strong>: 在回调函数中返回一个<code>pending</code>状态的<code>promise</code>对象</p><p><strong>问题案例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">//resolve(1);</span></span><br><span class="line">   <span class="title function_">reject</span>(<span class="number">1</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved1()&#x27;</span>, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved2()&#x27;</span>, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved3()&#x27;</span>, value);</span><br><span class="line">  &#125;</span><br><span class="line">).<span class="title function_">catch</span>(</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 此处catch返回一个成功的promise,但没有具体返回值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onRejected1()&#x27;</span>, reason);</span><br><span class="line">  &#125;</span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved4()&#x27;</span>, value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onRejected2()&#x27;</span>, reason);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// onRejected1() 1</span></span><br><span class="line"><span class="comment">// onResolved4() undefined</span></span><br></pre></td></tr></table></figure><p><strong>解决案例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">//resolve(1);</span></span><br><span class="line">   <span class="title function_">reject</span>(<span class="number">1</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved1()&#x27;</span>, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved2()&#x27;</span>, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved3()&#x27;</span>, value);</span><br><span class="line">  &#125;</span><br><span class="line">).<span class="title function_">catch</span>(</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onRejected1()&#x27;</span>, reason);</span><br><span class="line"><span class="comment">// 返回一个pending的promise,导致catch后面的then不再执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;); </span><br><span class="line">  &#125;</span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onResolved4()&#x27;</span>, value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onRejected2()&#x27;</span>, reason);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// onRejected1() 1</span></span><br></pre></td></tr></table></figure><p>在<code>catch</code>中返回一个新的<code>promise</code>, 且这个<code>promise</code>没有结果</p><p>由于, 返回的新的<code>promise</code>结果决定了后面<code>then</code>中的结果, 所以后面的<code>then</code>中也没有结果, 即可实现中断<code>promsie</code>链的效果</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_44972008/article/details/113779708">【Promise】入门-同步回调-异步回调-JS中的异常error处理-Promis的理解和使用-基本使用-链式调用-七个关键问题_YK菌的博客-CSDN博客</a></p><p><a href="https://www.bilibili.com/video/BV1GA411x7z1">尚硅谷Web前端Promise教程从入门到精通_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test.md</title>
      <link href="/2022/06/11/test-md/"/>
      <url>/2022/06/11/test-md/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="测试的代码"><a href="#测试的代码" class="headerlink" title="测试的代码"></a>测试的代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试的文字"><a href="#测试的文字" class="headerlink" title="测试的文字"></a>测试的文字</h2><p>大王就大为降低和来到</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
